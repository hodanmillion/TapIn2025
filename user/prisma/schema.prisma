generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  authId        String    @unique // ID from auth service
  username      String    @unique
  displayName   String?
  bio           String?
  avatarUrl     String?
  coverImageUrl String?
  location      String?
  website       String?
  dateOfBirth   DateTime?
  isPrivate     Boolean   @default(false)
  isVerified    Boolean   @default(false)
  
  // Stats
  followersCount Int @default(0)
  followingCount Int @default(0)
  postsCount     Int @default(0)
  
  // Metadata
  metadata      Json?
  preferences   Json      @default("{}")
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastSeenAt    DateTime?
  
  // Relations
  following     Follow[]  @relation("follower")
  followers     Follow[]  @relation("following")
  sentFriendRequests     FriendRequest[] @relation("sender")
  receivedFriendRequests FriendRequest[] @relation("receiver")
  blockedUsers  Block[]   @relation("blocker")
  blockedBy     Block[]   @relation("blocked")
  interests     UserInterest[]
  badges        UserBadge[]
  
  @@index([username])
  @@index([authId])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model FriendRequest {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  message    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  sender     User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Block {
  id        String   @id @default(uuid())
  blockerId String
  blockedId String
  reason    String?
  createdAt DateTime @default(now())
  
  blocker   User     @relation("blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User     @relation("blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  
  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model Interest {
  id    String @id @default(uuid())
  name  String @unique
  emoji String?
  users UserInterest[]
}

model UserInterest {
  userId     String
  interestId String
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interest   Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)
  
  @@id([userId, interestId])
}

model Badge {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  imageUrl    String
  users       UserBadge[]
}

model UserBadge {
  userId    String
  badgeId   String
  awardedAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  @@id([userId, badgeId])
}